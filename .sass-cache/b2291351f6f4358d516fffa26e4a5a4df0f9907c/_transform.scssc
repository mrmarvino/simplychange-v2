3.1.13 (Brainy Betty)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:@has_childrenT:
@linei:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@children[io:Sass::Tree::ImportNode
:@imported_filename"shared;i;0;	[ :@options{ o:Sass::Tree::CommentNode:@silenti :@value["/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */;i;	[ :
@loud0;@o;;i ;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;i;	[ ;0;@o;;i ;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;i;	[ ;0;@o;;i ;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;i ;	[ ;0;@o;;i ;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;i4;	[ ;0;@o;;i ;["./* The default x-origin for transforms */;i7;	[ ;0;@o:Sass::Tree::VariableNode:
@expro:Sass::Script::Number;i7;i8:@denominator_units[ :@numerator_units["%;@:@original"50%;i8:@guarded"!default:
@name"default-origin-x;	[ ;@o;;i ;["./* The default y-origin for transforms */;i9;	[ ;0;@o;;o;;i7;i:;[ ;["%;@;"50%;i:;"!default;"default-origin-y;	[ ;@o;;i ;["./* The default z-origin for transforms */;i;;	[ ;0;@o;;o;;i7;i<;[ ;["%;@;"50%;i<;"!default;"default-origin-z;	[ ;@o;;i ;["//* The default x-multiplier for scaling */;i?;	[ ;0;@o;;o;;f	1.25;i@;[ ;[ ;@;"	1.25;i@;"!default;"default-scale-x;	[ ;@o;;i ;["//* The default y-multiplier for scaling */;iA;	[ ;0;@o;;o:Sass::Script::Variable	;iB:@underscored_name"default_scale_x;"default-scale-x;@;iB;"!default;"default-scale-y;	[ ;@o;;i ;["//* The default z-multiplier for scaling */;iC;	[ ;0;@o;;o;	;iD;"default_scale_x;"default-scale-x;@;iD;"!default;"default-scale-z;	[ ;@o;;i ;["*/* The default angle for rotations */;iG;	[ ;0;@o;;o;;i2;iH;[ ;["deg;@;"
45deg;iH;"!default;"default-rotate;	[ ;@o;;i ;["</* The default x-vector for the axis of 3d rotations */;iK;	[ ;0;@o;;o;;i;iL;@N;[ ;@;"1;iL;"!default;"default-vector-x;	[ ;@o;;i ;["</* The default y-vector for the axis of 3d rotations */;iM;	[ ;0;@o;;o;;i;iN;@N;[ ;@;"1;iN;"!default;"default-vector-y;	[ ;@o;;i ;["</* The default z-vector for the axis of 3d rotations */;iO;	[ ;0;@o;;o;;i;iP;@N;[ ;@;"1;iP;"!default;"default-vector-z;	[ ;@o;;i ;["0/* The default x-length for translations */;iS;	[ ;0;@o;;o;;i;iT;[ ;["em;@;"1em;iT;"!default;"default-translate-x;	[ ;@o;;i ;["0/* The default y-length for translations */;iU;	[ ;0;@o;;o;	;iV;"default_translate_x;"default-translate-x;@;iV;"!default;"default-translate-y;	[ ;@o;;i ;["0/* The default z-length for translations */;iW;	[ ;0;@o;;o;	;iX;"default_translate_x;"default-translate-x;@;iX;"!default;"default-translate-z;	[ ;@o;;i ;["*/* The default x-angle for skewing */;i[;	[ ;0;@o;;o;;i
;i\;[ ;["deg;@;"	5deg;i\;"!default;"default-skew-x;	[ ;@o;;i ;["*/* The default y-angle for skewing */;i];	[ ;0;@o;;o;;i
;i^;[ ;["deg;@;"	5deg;i^;"!default;"default-skew-y;	[ ;@o;;i ;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;ia;	[ ;0;@o:Sass::Tree::MixinDefNode;T;il:
@args[[o;;"origin;"origin;@0[o;;"only3d;"only3d;@0;"apply-origin;	[o;;o:Sass::Script::Operation
:@operand1o;	;im;"only3d;"only3d;@;im:@operator:or:@operand2o;
;o:Sass::Script::Funcall
;im:@keywords{ ;[o;"
;im;#{ ;[o;	;im;"origin;"origin;@;"-compass-list;@;"-compass-list-size;@;im;:gt;!o;;i;im;@N;[ ;@;"2;@;@;im;0;"only3d;	[ ;@u:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@linein:@underscored_name"only3d:
@name"only3d:@options{ u:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@lineiu:@keywords{ :
@args[o:Sass::Script::String	:@value"transform-origin;is:
@type:identifier:@options{ o:Sass::Script::Variable	;is:@underscored_name"origin:
@name"origin;@o;		;
"	-moz;it;;;@o;		;
"-webkit;it;;;@o;		;
"-o;it;;;@o;		;
"-ms;it;;;@o:!Sass::Script::UnaryOperation	;it:@operando;		;
"-khtml;it;;;@:@operator:not;@o;		;
"official;it;;;@;"experimental:@children[ ;@[o:Sass::Tree::MixinNode;iq:@keywords{ :
@args[o:Sass::Script::String	:@value"transform-origin;io:
@type:identifier;	@	o; 	;io;"origin;"origin;	@	o:!Sass::Script::UnaryOperation	;ip:@operando;	;"	-moz;ip;;;	@	:@operator:not;	@	o;	;"-webkit;ip;;;	@	o;	;ip;o;	;"-o;ip;;;	@	;;;	@	o;	;ip;o;	;"-ms;ip;;;	@	;;;	@	o;	;ip;o;	;"-khtml;ip;;;	@	;;;	@	o;	;"official;ip;;;	@	;"experimental:@children[ ;	@	;@o;;i ;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;iy;	[ ;0;@o;;T;i;[	[o;;"origin_x;"origin-x;@o;	;i|;"default_origin_x;"default-origin-x;@[o;;"origin_y;"origin-y;@o;	;i};"default_origin_y;"default-origin-y;@[o;;"origin_z;"origin-z;@o:Sass::Script::Bool;F;i~;@[o;;"only3d;"only3d;@o;"
;i;#{ ;[o;	;i;"origin_z;"origin-z;@o;&;T;i;@o;&;F;i;@;"if;@;"transform-origin;	[o;;o;"
;i;#{ ;[o:Sass::Script::String	;" ;i:
@type:string;@;"unquote;@;i;0;"origin;	[ ;@u;%[o:Sass::Script::Operation
:@operand1o; 
;o:Sass::Script::Variable	:
@linei:@underscored_name"origin_x:
@name"origin-x:@options{ ;i:@operator:or:@operand2o;	;i;	"origin_y;
"origin-y;@;@;i;;;o;	;i;	"origin_z;
"origin-z;@;@0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_x:
@name"origin-x:@options{ u:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@expro:Sass::Script::Number:@valuei7:
@linei:@denominator_units[ :@numerator_units["%:@options{ :@original"50%;	i:@guarded0:
@name"origin:@children[ ;@[o:Sass::Tree::VariableNode:
@expro; 	;i;"origin_x;"origin-x;	@	;i:@guarded0;"origin:@children[ ;	@	u;Þ[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_y:
@name"origin-y:@options{ u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_z:
@name"origin-z:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i;"origin;"origin;	@	o:Sass::Script::Number;i7;i:@denominator_units[ :@numerator_units["%;	@	:@original"50%;i:@separator:
space;	@	;i:@guarded0;"origin:@children[ ;	@	[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i;"origin;"origin;	@	o; 	;i;"origin_y;"origin-y;	@	;i:@separator:
space;	@	;i:@guarded0;"origin:@children[ ;	@	u;5[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_z:
@name"origin-z:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i;"origin;"origin;	@	o; 	;i;"origin_z;"origin-z;	@	;i:@separator:
space;	@	;i:@guarded0;"origin:@children[ ;	@	o:Sass::Tree::MixinNode;i:@keywords{ :
@args[o;	;i;	"origin;
"origin;@o;	;i;	"only3d;
"only3d;@;
"apply-origin:@children[ ;@;@o;;i ;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;i;	[ ;0;@o;;T;i;[[o;;"transform;"transform;@0[o;;"only3d;"only3d;@o;&;F;i;@;"transform;	[u;%6[o:Sass::Script::Variable	:
@linei:@underscored_name"only3d:
@name"only3d:@options{ u:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@linei:@keywords{ :
@args[o:Sass::Script::String	:@value"transform;i:
@type:identifier:@options{ o:Sass::Script::Variable	;i:@underscored_name"transform:
@name"transform;@o;		;
"	-moz;i;;;@o;		;
"-webkit;i;;;@o;		;
"-o;i;;;@o;		;
"-ms;i;;;@o:!Sass::Script::UnaryOperation	;i:@operando;		;
"-khtml;i;;;@:@operator:not;@o;		;
"official;i;;;@;"experimental:@children[ ;@[o:Sass::Tree::MixinNode;i:@keywords{ :
@args[o:Sass::Script::String	:@value"transform;i:
@type:identifier;	@	o; 	;i;"transform;"transform;	@	o:!Sass::Script::UnaryOperation	;i:@operando;	;"	-moz;i;;;	@	:@operator:not;	@	o;	;"-webkit;i;;;	@	o;	;i;o;	;"-o;i;;;	@	;;;	@	o;	;i;o;	;"-ms;i;;;	@	;;;	@	o;	;i;o;	;"-khtml;i;;;	@	;;;	@	o;	;"official;i;;;	@	;"experimental:@children[ ;	@	;@o;;i ;["D/* Shortcut to target all browsers with 2D transform support */;i;	[ ;0;@o;;T;i ;[[o;;"
trans;"
trans;@0;"transform2d;	[o:Sass::Tree::MixinNode;i¡;#{ ;[o;	;i¡;"
trans;"
trans;@o;&;F;i¡;@;"transform;	[ ;@;@o;;i ;["E/* Shortcut to target only browsers with 3D transform support */;i¤;	[ ;0;@o;;T;i¥;[[o;;"
trans;"
trans;@0;"transform3d;	[o;*;i¦;#{ ;[o;	;i¦;"
trans;"
trans;@o;&;T;i¦;@;"transform;	[ ;@;@o;;i ;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;i©;	[ ;0;@o;;i ;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;i­;	[ ;0;@o;;T;i´;[[o;;"p;"p;@0;"perspective;	[o;*;i·;#{ ;[o;'	;"perspective;iµ;(:identifier;@o;	;iµ;"p;"p;@o:!Sass::Script::UnaryOperation	;i¶:@operando;'	;"	-moz;i¶;(;+;@;:not;@o;'	;"-webkit;i¶;(;+;@o;,	;i¶;-o;'	;"-o;i¶;(;+;@;;.;@o;,	;i¶;-o;'	;"-ms;i¶;(;+;@;;.;@o;,	;i¶;-o;'	;"-khtml;i¶;(;+;@;;.;@o;'	;"official;i¶;(;+;@;"experimental;	[ ;@;@o;;i ;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;iº;	[ ;0;@o;;T;i¿;[[o;;"origin;"origin;@o;;i7;i¿;[ ;["%;@;"50%;"perspective-origin;	[o;*;iÂ;#{ ;[o;'	;"perspective-origin;iÀ;(;+;@o;	;iÀ;"origin;"origin;@o;,	;iÁ;-o;'	;"	-moz;iÁ;(;+;@;;.;@o;'	;"-webkit;iÁ;(;+;@o;,	;iÁ;-o;'	;"-o;iÁ;(;+;@;;.;@o;,	;iÁ;-o;'	;"-ms;iÁ;(;+;@;;.;@o;,	;iÁ;-o;'	;"-khtml;iÁ;(;+;@;;.;@o;'	;"official;iÁ;(;+;@;"experimental;	[ ;@;@o;;i ;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;iÅ;	[ ;0;@o;;T;iË;[[o;;"
style;"
style;@o;'	;"preserve-3d;iË;(;+;@;"transform-style;	[o;*;iÎ;#{ ;[o;'	;"transform-style;iÌ;(;+;@o;	;iÌ;"
style;"
style;@o;,	;iÍ;-o;'	;"	-moz;iÍ;(;+;@;;.;@o;'	;"-webkit;iÍ;(;+;@o;,	;iÍ;-o;'	;"-o;iÍ;(;+;@;;.;@o;,	;iÍ;-o;'	;"-ms;iÍ;(;+;@;;.;@o;,	;iÍ;-o;'	;"-khtml;iÍ;(;+;@;;.;@o;'	;"official;iÍ;(;+;@;"experimental;	[ ;@;@o;;i ;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;iÑ;	[ ;0;@o;;T;i×;[[o;;"visibility;"visibility;@o;'	;"hidden;i×;(;+;@;"backface-visibility;	[o;*;iÚ;#{ ;[o;'	;"backface-visibility;iØ;(;+;@o;	;iØ;"visibility;"visibility;@o;,	;iÙ;-o;'	;"	-moz;iÙ;(;+;@;;.;@o;'	;"-webkit;iÙ;(;+;@o;,	;iÙ;-o;'	;"-o;iÙ;(;+;@;;.;@o;,	;iÙ;-o;'	;"-ms;iÙ;(;+;@;;.;@o;,	;iÙ;-o;'	;"-khtml;iÙ;(;+;@;;.;@o;'	;"official;iÙ;(;+;@;"experimental;	[ ;@;@o;;i ;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;iÝ;	[ ;0;@o;;i ;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;iä;	[ ;0;@o;;i ;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iç;	[ ;0;@o;;T;iõ;[	[o;;"scale_x;"scale-x;@o;	;iñ;"default_scale_x;"default-scale-x;@[o;;"scale_y;"scale-y;@o;	;iò;"scale_x;"scale-x;@[o;;"perspective;"perspective;@o;&;F;ió;@[o;;"only3d;"only3d;@o;&;F;iô;@;"
scale;	[o;;o;"
;iö;#{ ;[o;	;iö;"scale_x;"scale-x;@o;	;iö;"scale_y;"scale-y;@;"
scale;@;iö;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@linei÷:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;i÷:@keywords{ :
@args[o; 	;i÷;"perspective;"perspective;	@	;"perspective;	@	o; 	;i÷;"
trans;"
trans;	@	;i÷:@separator:
space;	@	;i÷:@guarded0;"
trans:@children[ ;	@	o;*;iø;#{ ;[o;	;iø;"
trans;"
trans;@o;	;iø;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iû;	[ ;0;@o;;T;i;[[o;;"
scale;"
scale;@o;	;i ;"default_scale_x;"default-scale-x;@[o;;"perspective;"perspective;@o;&;F;i;@[o;;"only3d;"only3d;@o;&;F;i;@;"scaleX;	[o;;o;"
;i;#{ ;[o;	;i;"
scale;"
scale;@;"scaleX;@;i;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;i:@keywords{ :
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	o; 	;i;"
trans;"
trans;	@	;i:@separator:
space;	@	;i:@guarded0;"
trans:@children[ ;	@	o;*;i;#{ ;[o;	;i;"
trans;"
trans;@o;	;i;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i	;	[ ;0;@o;;T;i;[[o;;"
scale;"
scale;@o;	;i;"default_scale_y;"default-scale-y;@[o;;"perspective;"perspective;@o;&;F;i;@[o;;"only3d;"only3d;@o;&;F;i;@;"scaleY;	[o;;o;"
;i;#{ ;[o;	;i;"
scale;"
scale;@;"scaleY;@;i;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;i:@keywords{ :
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	o; 	;i;"
trans;"
trans;	@	;i:@separator:
space;	@	;i:@guarded0;"
trans:@children[ ;	@	o;*;i;#{ ;[o;	;i;"
trans;"
trans;@o;	;i;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;	[ ;0;@o;;T;i;[[o;;"
scale;"
scale;@o;	;i;"default_scale_z;"default-scale-z;@[o;;"perspective;"perspective;@o;&;F;i;@;"scaleZ;	[o;;o;"
;i;#{ ;[o;	;i;"
scale;"
scale;@;"scaleZ;@;i;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@linei :@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;i :@keywords{ :
@args[o; 	;i ;"perspective;"perspective;	@	;"perspective;	@	o; 	;i ;"
trans;"
trans;	@	;i :@separator:
space;	@	;i :@guarded0;"
trans:@children[ ;	@	o;*;i!;#{ ;[o;	;i!;"
trans;"
trans;@;"transform3d;	[ ;@;@o;;i ;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i$;	[ ;0;@o;;T;i-;[	[o;;"scale_x;"scale-x;@o;	;i);"default_scale_x;"default-scale-x;@[o;;"scale_y;"scale-y;@o;	;i*;"default_scale_y;"default-scale-y;@[o;;"scale_z;"scale-z;@o;	;i+;"default_scale_z;"default-scale-z;@[o;;"perspective;"perspective;@o;&;F;i,;@;"scale3d;	[o;;o;"
;i.;#{ ;[o;	;i.;"scale_x;"scale-x;@o;	;i.;"scale_y;"scale-y;@o;	;i.;"scale_z;"scale-z;@;"scale3d;@;i.;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@linei/:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;i/:@keywords{ :
@args[o; 	;i/;"perspective;"perspective;	@	;"perspective;	@	o; 	;i/;"
trans;"
trans;	@	;i/:@separator:
space;	@	;i/:@guarded0;"
trans:@children[ ;	@	o;*;i0;#{ ;[o;	;i0;"
trans;"
trans;@;"transform3d;	[ ;@;@o;;i ;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;i3;	[ ;0;@o;;i ;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i7;	[ ;0;@o;;T;i@;[[o;;"rotate;"rotate;@o;	;i=;"default_rotate;"default-rotate;@[o;;"perspective;"perspective;@o;&;F;i>;@[o;;"only3d;"only3d;@o;&;F;i?;@;"rotate;	[o;;o;"
;iA;#{ ;[o;	;iA;"rotate;"rotate;@;"rotate;@;iA;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@lineiB:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;iB:@keywords{ :
@args[o; 	;iB;"perspective;"perspective;	@	;"perspective;	@	o; 	;iB;"
trans;"
trans;	@	;iB:@separator:
space;	@	;iB:@guarded0;"
trans:@children[ ;	@	o;*;iC;#{ ;[o;	;iC;"
trans;"
trans;@o;	;iC;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iF;	[ ;0;@o;;T;iM;[[o;;"rotate;"rotate;@o;	;iJ;"default_rotate;"default-rotate;@[o;;"perspective;"perspective;@o;&;F;iK;@[o;;"only3d;"only3d;@o;&;F;iL;@;"rotateZ;	[o;*;iN;#{ ;[o;	;iN;"rotate;"rotate;@o;	;iN;"perspective;"perspective;@o;	;iN;"only3d;"only3d;@;"rotate;	[ ;@;@o;;i ;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iQ;	[ ;0;@o;;T;iX;[[o;;"rotate;"rotate;@o;	;iV;"default_rotate;"default-rotate;@[o;;"perspective;"perspective;@o;&;F;iW;@;"rotateX;	[o;;o;"
;iY;#{ ;[o;	;iY;"rotate;"rotate;@;"rotateX;@;iY;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@lineiZ:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;iZ:@keywords{ :
@args[o; 	;iZ;"perspective;"perspective;	@	;"perspective;	@	o; 	;iZ;"
trans;"
trans;	@	;iZ:@separator:
space;	@	;iZ:@guarded0;"
trans:@children[ ;	@	o;*;i[;#{ ;[o;	;i[;"
trans;"
trans;@;"transform3d;	[ ;@;@o;;i ;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i^;	[ ;0;@o;;T;ie;[[o;;"rotate;"rotate;@o;	;ic;"default_rotate;"default-rotate;@[o;;"perspective;"perspective;@o;&;F;id;@;"rotateY;	[o;;o;"
;if;#{ ;[o;	;if;"rotate;"rotate;@;"rotateY;@;if;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@lineig:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;ig:@keywords{ :
@args[o; 	;ig;"perspective;"perspective;	@	;"perspective;	@	o; 	;ig;"
trans;"
trans;	@	;ig:@separator:
space;	@	;ig:@guarded0;"
trans:@children[ ;	@	o;*;ih;#{ ;[o;	;ih;"
trans;"
trans;@;"transform3d;	[ ;@;@o;;i ;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ik;	[ ;0;@o;;T;ix;[
[o;;"vector_x;"vector-x;@o;	;is;"default_vector_x;"default-vector-x;@[o;;"vector_y;"vector-y;@o;	;it;"default_vector_y;"default-vector-y;@[o;;"vector_z;"vector-z;@o;	;iu;"default_vector_z;"default-vector-z;@[o;;"rotate;"rotate;@o;	;iv;"default_rotate;"default-rotate;@[o;;"perspective;"perspective;@o;&;F;iw;@;"rotate3d;	[o;;o;"
;iy;#{ ;[	o;	;iy;"vector_x;"vector-x;@o;	;iy;"vector_y;"vector-y;@o;	;iy;"vector_z;"vector-z;@o;	;iy;"rotate;"rotate;@;"rotate3d;@;iy;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@lineiz:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;iz:@keywords{ :
@args[o; 	;iz;"perspective;"perspective;	@	;"perspective;	@	o; 	;iz;"
trans;"
trans;	@	;iz:@separator:
space;	@	;iz:@guarded0;"
trans:@children[ ;	@	o;*;i{;#{ ;[o;	;i{;"
trans;"
trans;@;"transform3d;	[ ;@;@o;;i ;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;i~;	[ ;0;@o;;i ;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;	[ ;0;@o;;T;i;[	[o;;"translate_x;"translate-x;@o;	;i;"default_translate_x;"default-translate-x;@[o;;"translate_y;"translate-y;@o;	;i;"default_translate_y;"default-translate-y;@[o;;"perspective;"perspective;@o;&;F;i;@[o;;"only3d;"only3d;@o;&;F;i;@;"translate;	[o;;o;"
;i;#{ ;[o;	;i;"translate_x;"translate-x;@o;	;i;"translate_y;"translate-y;@;"translate;@;i;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;i:@keywords{ :
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	o; 	;i;"
trans;"
trans;	@	;i:@separator:
space;	@	;i:@guarded0;"
trans:@children[ ;	@	o;*;i;#{ ;[o;	;i;"
trans;"
trans;@o;	;i;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;	[ ;0;@o;;T;i;[[o;;"trans_x;"trans-x;@o;	;i;"default_translate_x;"default-translate-x;@[o;;"perspective;"perspective;@o;&;F;i;@[o;;"only3d;"only3d;@o;&;F;i;@;"translateX;	[o;;o;"
;i;#{ ;[o;	;i;"trans_x;"trans-x;@;"translateX;@;i;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;i:@keywords{ :
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	o; 	;i;"
trans;"
trans;	@	;i:@separator:
space;	@	;i:@guarded0;"
trans:@children[ ;	@	o;*;i;#{ ;[o;	;i;"
trans;"
trans;@o;	;i;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;	[ ;0;@o;;T;i¨;[[o;;"trans_y;"trans-y;@o;	;i¥;"default_translate_y;"default-translate-y;@[o;;"perspective;"perspective;@o;&;F;i¦;@[o;;"only3d;"only3d;@o;&;F;i§;@;"translateY;	[o;;o;"
;i©;#{ ;[o;	;i©;"trans_y;"trans-y;@;"translateY;@;i©;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@lineiª:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;iª:@keywords{ :
@args[o; 	;iª;"perspective;"perspective;	@	;"perspective;	@	o; 	;iª;"
trans;"
trans;	@	;iª:@separator:
space;	@	;iª:@guarded0;"
trans:@children[ ;	@	o;*;i«;#{ ;[o;	;i«;"
trans;"
trans;@o;	;i«;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i®;	[ ;0;@o;;T;iµ;[[o;;"trans_z;"trans-z;@o;	;i³;"default_translate_z;"default-translate-z;@[o;;"perspective;"perspective;@o;&;F;i´;@;"translateZ;	[o;;o;"
;i¶;#{ ;[o;	;i¶;"trans_z;"trans-z;@;"translateZ;@;i¶;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@linei·:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;i·:@keywords{ :
@args[o; 	;i·;"perspective;"perspective;	@	;"perspective;	@	o; 	;i·;"
trans;"
trans;	@	;i·:@separator:
space;	@	;i·:@guarded0;"
trans:@children[ ;	@	o;*;i¸;#{ ;[o;	;i¸;"
trans;"
trans;@;"transform3d;	[ ;@;@o;;i ;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i»;	[ ;0;@o;;T;iÄ;[	[o;;"translate_x;"translate-x;@o;	;iÀ;"default_translate_x;"default-translate-x;@[o;;"translate_y;"translate-y;@o;	;iÁ;"default_translate_y;"default-translate-y;@[o;;"translate_z;"translate-z;@o;	;iÂ;"default_translate_z;"default-translate-z;@[o;;"perspective;"perspective;@o;&;F;iÃ;@;"translate3d;	[o;;o;"
;iÅ;#{ ;[o;	;iÅ;"translate_x;"translate-x;@o;	;iÅ;"translate_y;"translate-y;@o;	;iÅ;"translate_z;"translate-z;@;"translate3d;@;iÅ;0;"
trans;	[ ;@u;%[o:Sass::Script::Variable	:
@lineiÆ:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;iÆ:@keywords{ :
@args[o; 	;iÆ;"perspective;"perspective;	@	;"perspective;	@	o; 	;iÆ;"
trans;"
trans;	@	;iÆ:@separator:
space;	@	;iÆ:@guarded0;"
trans:@children[ ;	@	o;*;iÇ;#{ ;[o;	;iÇ;"
trans;"
trans;@;"transform3d;	[ ;@;@o;;i ;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;iÊ;	[ ;0;@o;;i ;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÎ;	[ ;0;@o;;T;iÙ;[[o;;"skew_x;"skew-x;@o;	;iÖ;"default_skew_x;"default-skew-x;@[o;;"skew_y;"skew-y;@o;	;i×;"default_skew_y;"default-skew-y;@[o;;"only3d;"only3d;@o;&;F;iØ;@;"	skew;	[o;;o;"
;iÚ;#{ ;[o;	;iÚ;"skew_x;"skew-x;@o;	;iÚ;"skew_y;"skew-y;@;"	skew;@;iÚ;0;"
trans;	[ ;@o;*;iÛ;#{ ;[o;	;iÛ;"
trans;"
trans;@o;	;iÛ;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÞ;	[ ;0;@o;;T;iæ;[[o;;"skew_x;"skew-x;@o;	;iä;"default_skew_x;"default-skew-x;@[o;;"only3d;"only3d;@o;&;F;iå;@;"
skewX;	[o;;o;"
;iç;#{ ;[o;	;iç;"skew_x;"skew-x;@;"
skewX;@;iç;0;"
trans;	[ ;@o;*;iè;#{ ;[o;	;iè;"
trans;"
trans;@o;	;iè;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ië;	[ ;0;@o;;T;ió;[[o;;"skew_y;"skew-y;@o;	;iñ;"default_skew_y;"default-skew-y;@[o;;"only3d;"only3d;@o;&;F;iò;@;"
skewY;	[o;;o;"
;iô;#{ ;[o;	;iô;"skew_y;"skew-y;@;"
skewY;@;iô;0;"
trans;	[ ;@o;*;iõ;#{ ;[o;	;iõ;"
trans;"
trans;@o;	;iõ;"only3d;"only3d;@;"transform;	[ ;@;@o;;i ;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iù;	[ ;0;@o;;T;i;[[o;;"perspective;"perspective;@o;&;F;i;@[o;;"scale_x;"scale-x;@o;&;F;i;@[o;;"scale_y;"scale-y;@o;&;F;i;@[o;;"scale_z;"scale-z;@o;&;F;i;@[o;;"rotate_x;"rotate-x;@o;&;F;i;@[o;;"rotate_y;"rotate-y;@o;&;F;i;@[o;;"rotate_z;"rotate-z;@o;&;F;i	;@[o;;"rotate3d;"rotate3d;@o;&;F;i
;@[o;;"trans_x;"trans-x;@o;&;F;i;@[o;;"trans_y;"trans-y;@o;&;F;i;@[o;;"trans_z;"trans-z;@o;&;F;i;@[o;;"skew_x;"skew-x;@o;&;F;i;@[o;;"skew_y;"skew-y;@o;&;F;i;@[o;;"origin_x;"origin-x;@o;&;F;i;@[o;;"origin_y;"origin-y;@o;&;F;i;@[o;;"origin_z;"origin-z;@o;&;F;i;@[o;;"only3d;"only3d;@o;&;F;i;@;"create-transform;	[o;;o;"
;i;#{ ;[o;'	;" ;i;(;);@;"unquote;@;i;0;"
trans;	[ ;@o;;i ;["/* perspective */;i;	[ ;0;@u;%.[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::Funcall
;i:@keywords{ :
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	;i:@guarded0;"
trans:@children[ ;	@	o;;i ;["/* scale */;i;	[ ;0;@u;%Ê[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@linei:@underscored_name"scale_x:
@name"scale-x:@options{ ;i:@operator:and:@operand2o;	;i;	"scale_y;
"scale-y;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@linei:@underscored_name"scale_x:
@name"scale-x:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i:@keywords{ :
@args[o; 	;i;"scale_x;"scale-x;	@	;"scaleX;	@	;i:@separator:
space;	@	;i:@guarded0;"
trans:@children[ ;	@	u; v[o:Sass::Script::Variable	:
@linei :@underscored_name"scale_y:
@name"scale-y:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i ;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i :@keywords{ :
@args[o; 	;i ;"scale_y;"scale-y;	@	;"scaleY;	@	;i :@separator:
space;	@	;i :@guarded0;"
trans:@children[ ;	@	u; v[o:Sass::Script::Variable	:
@linei!:@underscored_name"scale_z:
@name"scale-z:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i!;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i!:@keywords{ :
@args[o; 	;i!;"scale_z;"scale-z;	@	;"scaleZ;	@	;i!:@separator:
space;	@	;i!:@guarded0;"
trans:@children[ ;	@	[u;L[o:Sass::Script::Variable	:
@linei:@underscored_name"scale_z:
@name"scale-z:@options{ u:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	:
@linei:@underscored_name"
trans:
@name"
trans:@options{ o:Sass::Script::Funcall
;
i:@keywords{ :
@args[o;		;
i;"scale_x;"scale-x;@o;		;
i;"scale_y;"scale-y;@;"
scale;@;
i:@separator:
space;@;
i:@guarded0;"
trans:@children[ ;@[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i:@keywords{ :
@args[o; 	;i;"scale_x;"scale-x;	@	o; 	;i;"scale_y;"scale-y;	@	o; 	;i;"scale_z;"scale-z;	@	;"scale3d;	@	;i:@separator:
space;	@	;i:@guarded0;"
trans:@children[ ;	@	o;;i ;["/* rotate */;i$;	[ ;0;@u;%{[o:Sass::Script::Variable	:
@linei%:@underscored_name"rotate_x:
@name"rotate-x:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i%;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i%:@keywords{ :
@args[o; 	;i%;"rotate_x;"rotate-x;	@	;"rotateX;	@	;i%:@separator:
space;	@	;i%:@guarded0;"
trans:@children[ ;	@	u;%{[o:Sass::Script::Variable	:
@linei&:@underscored_name"rotate_y:
@name"rotate-y:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i&;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i&:@keywords{ :
@args[o; 	;i&;"rotate_y;"rotate-y;	@	;"rotateY;	@	;i&:@separator:
space;	@	;i&:@guarded0;"
trans:@children[ ;	@	u;%{[o:Sass::Script::Variable	:
@linei':@underscored_name"rotate_z:
@name"rotate-z:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i';"
trans;"
trans;	@	o:Sass::Script::Funcall
;i':@keywords{ :
@args[o; 	;i';"rotate_z;"rotate-z;	@	;"rotateZ;	@	;i':@separator:
space;	@	;i':@guarded0;"
trans:@children[ ;	@	u;%|[o:Sass::Script::Variable	:
@linei(:@underscored_name"rotate3d:
@name"rotate3d:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i(;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i(:@keywords{ :
@args[o; 	;i(;"rotate3d;"rotate3d;	@	;"rotate3d;	@	;i(:@separator:
space;	@	;i(:@guarded0;"
trans:@children[ ;	@	o;;i ;["/* translate */;i*;	[ ;0;@u;%Þ[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@linei+:@underscored_name"trans_x:
@name"trans-x:@options{ ;i+:@operator:and:@operand2o;	;i+;	"trans_y;
"trans-y;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@linei/:@underscored_name"trans_x:
@name"trans-x:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i/;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i/:@keywords{ :
@args[o; 	;i/;"trans_x;"trans-x;	@	;"translateX;	@	;i/:@separator:
space;	@	;i/:@guarded0;"
trans:@children[ ;	@	u; z[o:Sass::Script::Variable	:
@linei0:@underscored_name"trans_y:
@name"trans-y:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i0;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i0:@keywords{ :
@args[o; 	;i0;"trans_y;"trans-y;	@	;"translateY;	@	;i0:@separator:
space;	@	;i0:@guarded0;"
trans:@children[ ;	@	u; z[o:Sass::Script::Variable	:
@linei1:@underscored_name"trans_z:
@name"trans-z:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i1;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i1:@keywords{ :
@args[o; 	;i1;"trans_z;"trans-z;	@	;"translateZ;	@	;i1:@separator:
space;	@	;i1:@guarded0;"
trans:@children[ ;	@	[u;T[o:Sass::Script::Variable	:
@linei,:@underscored_name"trans_z:
@name"trans-z:@options{ u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	:
@linei-:@underscored_name"
trans:
@name"
trans:@options{ o:Sass::Script::Funcall
;
i-:@keywords{ :
@args[o;		;
i-;"trans_x;"trans-x;@o;		;
i-;"trans_y;"trans-y;@;"translate;@;
i-:@separator:
space;@;
i-:@guarded0;"
trans:@children[ ;@[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i,;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i,:@keywords{ :
@args[o; 	;i,;"trans_x;"trans-x;	@	o; 	;i,;"trans_y;"trans-y;	@	o; 	;i,;"trans_z;"trans-z;	@	;"translate3d;	@	;i,:@separator:
space;	@	;i,:@guarded0;"
trans:@children[ ;	@	o;;i ;["/* skew */;i4;	[ ;0;@u;%[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@linei5:@underscored_name"skew_x:
@name"skew-x:@options{ ;i5:@operator:and:@operand2o;	;i5;	"skew_y;
"skew-y;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@linei7:@underscored_name"skew_x:
@name"skew-x:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i7;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i7:@keywords{ :
@args[o; 	;i7;"skew_x;"skew-x;	@	;"
skewX;	@	;i7:@separator:
space;	@	;i7:@guarded0;"
trans:@children[ ;	@	u; q[o:Sass::Script::Variable	:
@linei8:@underscored_name"skew_y:
@name"skew-y:@options{ 0[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o; 	;i8;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i8:@keywords{ :
@args[o; 	;i8;"skew_y;"skew-y;	@	;"
skewY;	@	;i8:@separator:
space;	@	;i8:@guarded0;"
trans:@children[ ;	@	[o:Sass::Tree::VariableNode:
@expro:Sass::Script::List	:@value[o;	;i5;	"
trans;
"
trans;@
o:Sass::Script::Funcall
;i5:@keywords{ :
@args[o;	;i5;	"skew_x;
"skew-x;@
o;	;i5;	"skew_y;
"skew-y;@
;
"	skew;@
;i5:@separator:
space;@
;i5:@guarded0;
"
trans:@children[ ;@
o;;i ;["/* apply it! */;i;;	[ ;0;@o;*;i<;#{ ;[o;	;i<;"
trans;"
trans;@o;	;i<;"only3d;"only3d;@;"transform;	[ ;@o;*;i=;#{ ;[	o;	;i=;"origin_x;"origin-x;@o;	;i=;"origin_y;"origin-y;@o;	;i=;"origin_z;"origin-z;@o;	;i=;"only3d;"only3d;@;"transform-origin;	[ ;@;@o;;i ;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;iA;	[ ;0;@o;;T;iL;[[o;;"
scale;"
scale;@o;&;F;iD;@[o;;"rotate;"rotate;@o;&;F;iE;@[o;;"trans_x;"trans-x;@o;&;F;iF;@[o;;"trans_y;"trans-y;@o;&;F;iG;@[o;;"skew_x;"skew-x;@o;&;F;iH;@[o;;"skew_y;"skew-y;@o;&;F;iI;@[o;;"origin_x;"origin-x;@o;&;F;iJ;@[o;;"origin_y;"origin-y;@o;&;F;iK;@;"simple-transform;	[o;*;iU;#{ ;[o;&;F;iN;@o;	;iO;"
scale;"
scale;@o;	;iO;"
scale;"
scale;@o;&;F;iO;@o;&;F;iP;@o;&;F;iP;@o;	;iP;"rotate;"rotate;@o;&;F;iP;@o;	;iQ;"trans_x;"trans-x;@o;	;iQ;"trans_y;"trans-y;@o;&;F;iQ;@o;	;iR;"skew_x;"skew-x;@o;	;iR;"skew_y;"skew-y;@o;	;iS;"origin_x;"origin-x;@o;	;iS;"origin_y;"origin-y;@o;&;F;iS;@o;&;F;iT;@;"create-transform;	[ ;@;@;@